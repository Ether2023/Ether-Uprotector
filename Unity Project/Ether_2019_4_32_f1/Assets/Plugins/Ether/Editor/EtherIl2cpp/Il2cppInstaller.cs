using Ether.Il2cpp;
using System; using System.Collections.Generic; using System.Diagnostics; using System.IO; using System.Text; using UnityEngine;  namespace Ether.Il2cpp {     public static class Il2cppInstaller     {         public static void Install(string unityExePath, EtherIl2cppConfig config)         {             if (!unityExePath.EndsWith("Unity.exe"))             {                 throw new Exception("Invaild Unity.exe");             }              string editorPath = Path.GetDirectoryName(unityExePath);             string etherSignFile = editorPath + "/Data/il2cpp/libil2cpp/" + "EtherIl2cppConfig.json";             config.UnityVersion = Application.unityVersion;                          if (File.Exists(etherSignFile))             {                 return;             } 			string libil2Path = editorPath + "/Data/il2cpp/libil2cpp";              			string tmpOutput = Application.dataPath+"_EtherTemp/libil2cpp";             try             {                 Directory.Delete(tmpOutput, true);             }             catch { }             Utilitys.CopyDirectory(libil2Path+"/", tmpOutput+"/");             if(!EtherIl2cppNative.InstallEtherIl2cpp(tmpOutput, config))             {                 throw new Exception(EtherIl2cppNative.GetLastError());             }             MoveFileHelper.MoveDirectory(tmpOutput, libil2Path);         }          public static string GetUnityVersion(string fp)         {             FileVersionInfo f_vi = FileVersionInfo.GetVersionInfo(fp);             return f_vi.FileVersion;         }          public static bool CheckWritePermission(string dir)         {             try             {                 if (!Directory.Exists(dir))                 {                     throw new Exception("内部错误");                 }                 File.WriteAllText(dir + "/TestPermission.txt", "TestPermission");                 File.Delete(dir + "/TestPermission.txt");             }             catch             {                 throw new Exception("无读写权限\n请以管理员身份运行");             }             return true;         }          public static void UnInstall(string unityExePath)         {             if (!unityExePath.EndsWith("Unity.exe"))             {                 throw new Exception("Invaild Unity.exe");             }              string editorPath = Path.GetDirectoryName(unityExePath);  			string libil2Path = editorPath + "/Data/il2cpp/libil2cpp";             string tmpOutput = Application.dataPath + "_EtherTemp/libil2cpp";             try             {                 Directory.Delete(tmpOutput, true);             }             catch { }             Utilitys.CopyDirectory(libil2Path+"/", tmpOutput+"/");             if (!EtherIl2cppNative.UninstallEtherIl2cpp(tmpOutput, EtherIl2cppConfig.Default))             {                 throw new Exception(EtherIl2cppNative.GetLastError());             }             MoveFileHelper.MoveDirectory(tmpOutput, libil2Path);         }     } }  class MoveFileHelper
{
    public static string MoveFileHelperExe => Application.dataPath + "/Plugins/Ether/Editor/EtherIl2cpp/Plugins/movefile.exe";

    public static void MoveDirectory(string src, string dest)
    {
        
        if (!File.Exists(MoveFileHelperExe))
            File.Copy(MoveFileHelperExe, "movefile.exe");
        Utilitys.system($"start movefile.exe \"{src}\" \"{dest}\"");
        File.Delete("movefile.exe");
    }
}